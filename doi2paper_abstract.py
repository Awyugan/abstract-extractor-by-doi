import requestsfrom requests.adapters import HTTPAdapterfrom urllib3.util.retry import Retryimport csvimport timeimport logging# 设置日志记录logging.basicConfig(filename='doi2paper_abstract.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')# 设置重试策略retry_strategy = Retry(    total=3,    status_forcelist=[429, 500, 502, 503, 504],    allowed_methods=["HEAD", "GET", "OPTIONS"],    backoff_factor=1)adapter = HTTPAdapter(max_retries=retry_strategy)http = requests.Session()http.mount("https://", adapter)http.mount("http://", adapter)# 文件操作使用上下文管理器with open('doi_abstract.csv', 'a', newline='', encoding='utf-8') as csv_file, \     open('abstract_exception.txt', 'w', encoding='utf-8') as exception_txt, \     open('abstract_not_200.txt', 'w', encoding='utf-8') as error_txt:    csv_writer = csv.DictWriter(csv_file, fieldnames=['DOI', 'ABSTRACT'])    if csv_file.tell() == 0:  # 如果文件是空的，则写入表头        csv_writer.writeheader()    error_txt.write('Below DOI should be moved to doi_list.txt and get the result again:\n')    # 计算总DOI数以显示进度    total_dois = sum(1 for _ in open('doi_list.txt', 'r', encoding='utf-8'))    processed_dois = 0    time_start = time.time()    with open('doi_list.txt', 'r', encoding='utf-8') as f:        for line in f:            doi = line.strip()            if not doi:                continue            try:                response = http.get(f'https://api.semanticscholar.org/graph/v1/paper/{doi}?fields=abstract')                if response.status_code != 200:                    logging.warning(f'{doi} response status: {response.status_code}')                    error_txt.write(doi + '\n')                else:                    abstract = response.json().get('abstract', 'NULL')                    csv_writer.writerow({'DOI': doi, 'ABSTRACT': abstract})                    logging.info(f'{doi} success')            except Exception as e:                logging.error(f'Exception for {doi}: {e}')                exception_txt.write(doi + '\n')            processed_dois += 1            print(f'Processing DOI {processed_dois}/{total_dois}...', end='\r')    # 确保终端的下一个输出在新的一行    print()    time_end = time.time()    logging.info(f'Time cost {time_end - time_start:.2f}s')